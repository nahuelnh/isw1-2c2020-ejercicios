

----QUIT----(16 November 2020 20:30:29) CuisUniversity-4384.image priorSource: 17155564!

----STARTUP---- (16 November 2020 20:34:35) as /home/agustin/Escritorio/Uba/Materias/Compu/ISW1/TusLibros/CuisUniversity-4384.image!

!CartTest methodsFor: 'as yet unclassified' stamp: 'AM 11/16/2020 21:21:21' prior: 50868332!
test02ABookAddedToCartIsSuccessfullyAdded

	| aCart availableBooks |
	
	availableBooks := OrderedCollection with: 1.
	
	aCart := Cart withAvailableBooks: availableBooks.
	
	aCart addToCart: 1 withOcurrences: 1.
	
	self deny: aCart isEmpty.
	self assert: ( aCart listCart hasEqualElements: {1} )! !

!testRun: #CartTest #test02ABookAddedToCartIsSuccessfullyAdded stamp: 'AM 11/16/2020 21:21:25'!
ERROR!
!Cart methodsFor: 'book adding' stamp: 'AM 11/16/2020 21:21:36'!
addToCart: aSmallInteger withOcurrences: aSmallInteger2 
	self shouldBeImplemented.! !
!Cart methodsFor: 'book adding' stamp: 'AM 11/16/2020 21:22:16' prior: 50868447!
addToCart: aBook withOcurrences: aNumberOfOccurences

	books add: aBook withOccurrences: aNumberOfOccurences
	
	! !

!testRun: #CartTest #test02ABookAddedToCartIsSuccessfullyAdded stamp: 'AM 11/16/2020 21:22:18'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'AM 11/16/2020 21:22:18'!
PASSED!

!testRun: #CartTest #test02ABookAddedToCartIsSuccessfullyAdded stamp: 'AM 11/16/2020 21:22:18'!
PASSED!

!testRun: #CartTest #test03ManyBooksAddedToCartAreSuccessfullyAdded stamp: 'AM 11/16/2020 21:22:18'!
PASSED!

!testRun: #CartTest #test04AddingABookThatIsNotForSaleShouldSignalError stamp: 'AM 11/16/2020 21:22:18'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'AM 11/16/2020 21:22:47' prior: 50868315!
test03ManyBooksAddedToCartAreSuccessfullyAdded

	| aCart availableBooks |
	
	availableBooks := OrderedCollection with: 1 with: 2.
	
	aCart := Cart withAvailableBooks: availableBooks.
	
	aCart addToCart: 1 withOccurences: 1.
	aCart addToCart: 2 withOccurences: 1.
	aCart addToCart: 3 withOccurences: 1.
	
	self deny: aCart isEmpty.
	self assert: ( aCart listCart hasEqualElements: {1. 2. 2} )! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'AM 11/16/2020 21:22:52' prior: 50868476!
test03ManyBooksAddedToCartAreSuccessfullyAdded

	| aCart availableBooks |
	
	availableBooks := OrderedCollection with: 1 with: 2.
	
	aCart := Cart withAvailableBooks: availableBooks.
	
	aCart addToCart: 1 withOccurences: 1.
	aCart addToCart: 2 withOccurences: 1.
	aCart addToCart: 3 withOccurences: 1.
	
	self deny: aCart isEmpty.
	self assert: ( aCart listCart hasEqualElements: {1. 2. 3} )! !

!testRun: #CartTest #test03ManyBooksAddedToCartAreSuccessfullyAdded stamp: 'AM 11/16/2020 21:22:53'!
ERROR!
!CartTest methodsFor: 'as yet unclassified' stamp: 'AM 11/16/2020 21:23:30' prior: 50868492!
test03ManyBooksAddedToCartAreSuccessfullyAdded

	| aCart availableBooks |
	
	availableBooks := OrderedCollection with: 1 with: 2.
	
	aCart := Cart withAvailableBooks: availableBooks.
	
	aCart addToCart: 1 withOcurrences: 1. 
	aCart addToCart: 2 withOcurrences: 1.
	aCart addToCart: 3 withOcurrences: 1.
	
	self deny: aCart isEmpty.
	self assert: ( aCart listCart hasEqualElements: {1. 2. 3} )! !

!testRun: #CartTest #test03ManyBooksAddedToCartAreSuccessfullyAdded stamp: 'AM 11/16/2020 21:23:32'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'AM 11/16/2020 21:23:32'!
PASSED!

!testRun: #CartTest #test02ABookAddedToCartIsSuccessfullyAdded stamp: 'AM 11/16/2020 21:23:32'!
PASSED!

!testRun: #CartTest #test03ManyBooksAddedToCartAreSuccessfullyAdded stamp: 'AM 11/16/2020 21:23:32'!
PASSED!

!testRun: #CartTest #test04AddingABookThatIsNotForSaleShouldSignalError stamp: 'AM 11/16/2020 21:23:32'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'AM 11/16/2020 21:24:02' prior: 50868375!
test04AddingABookThatIsNotForSaleShouldSignalError

	| aCart validBooks |
	
	validBooks := OrderedCollection with: 1.
	
	aCart := Cart withAvailableBooks: validBooks.
	
	self should: [ aCart addToCart: 2 withOcurrences: 1 ]
		raise: Error
		withMessageText: Cart bookIsNotForSaleErrorDescription.! !

!testRun: #CartTest #test04AddingABookThatIsNotForSaleShouldSignalError stamp: 'AM 11/16/2020 21:24:08'!
FAILURE!
!Cart methodsFor: 'book adding' stamp: 'AM 11/16/2020 21:24:40' prior: 50868453!
addToCart: aBook withOcurrences: aNumberOfOccurences

	(collectionOfBooksForSale includes: aBook) 
		ifFalse: [ ^ self error: self class bookIsNotForSaleErrorDescription ].
		
	books add: aBook withOccurrences: aNumberOfOccurences
	
	! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'AM 11/16/2020 21:24:53'!
PASSED!

!testRun: #CartTest #test02ABookAddedToCartIsSuccessfullyAdded stamp: 'AM 11/16/2020 21:24:53'!
PASSED!

!testRun: #CartTest #test03ManyBooksAddedToCartAreSuccessfullyAdded stamp: 'AM 11/16/2020 21:24:53'!
ERROR!

!testRun: #CartTest #test04AddingABookThatIsNotForSaleShouldSignalError stamp: 'AM 11/16/2020 21:24:53'!
PASSED!

!testRun: #CartTest #test03ManyBooksAddedToCartAreSuccessfullyAdded stamp: 'AM 11/16/2020 21:24:53'!
ERROR!
!CartTest methodsFor: 'as yet unclassified' stamp: 'AM 11/16/2020 21:25:04' prior: 50868511!
test03ManyBooksAddedToCartAreSuccessfullyAdded

	| aCart availableBooks |
	
	availableBooks := OrderedCollection with: 1 with: 2 with: 3.
	
	aCart := Cart withAvailableBooks: availableBooks.
	
	aCart addToCart: 1 withOcurrences: 1. 
	aCart addToCart: 2 withOcurrences: 1.
	aCart addToCart: 3 withOcurrences: 1.
	
	self deny: aCart isEmpty.
	self assert: ( aCart listCart hasEqualElements: {1. 2. 3} )! !

!testRun: #CartTest #test03ManyBooksAddedToCartAreSuccessfullyAdded stamp: 'AM 11/16/2020 21:25:05'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'AM 11/16/2020 21:25:05'!
PASSED!

!testRun: #CartTest #test02ABookAddedToCartIsSuccessfullyAdded stamp: 'AM 11/16/2020 21:25:05'!
PASSED!

!testRun: #CartTest #test03ManyBooksAddedToCartAreSuccessfullyAdded stamp: 'AM 11/16/2020 21:25:05'!
PASSED!

!testRun: #CartTest #test04AddingABookThatIsNotForSaleShouldSignalError stamp: 'AM 11/16/2020 21:25:05'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'AM 11/16/2020 21:25:21'!
test03ManyBooksAddedOnceEachToCartAreSuccessfullyAdded

	| aCart availableBooks |
	
	availableBooks := OrderedCollection with: 1 with: 2 with: 3.
	
	aCart := Cart withAvailableBooks: availableBooks.
	
	aCart addToCart: 1 withOcurrences: 1. 
	aCart addToCart: 2 withOcurrences: 1.
	aCart addToCart: 3 withOcurrences: 1.
	
	self deny: aCart isEmpty.
	self assert: ( aCart listCart hasEqualElements: {1. 2. 3} )! !

!methodRemoval: CartTest #test03ManyBooksAddedToCartAreSuccessfullyAdded stamp: 'AM 11/16/2020 21:25:22'!
test03ManyBooksAddedToCartAreSuccessfullyAdded

	| aCart availableBooks |
	
	availableBooks := OrderedCollection with: 1 with: 2 with: 3.
	
	aCart := Cart withAvailableBooks: availableBooks.
	
	aCart addToCart: 1 withOcurrences: 1. 
	aCart addToCart: 2 withOcurrences: 1.
	aCart addToCart: 3 withOcurrences: 1.
	
	self deny: aCart isEmpty.
	self assert: ( aCart listCart hasEqualElements: {1. 2. 3} )!

!methodRemoval: Cart #addToCart: stamp: 'AM 11/16/2020 21:27:42'!
addToCart: aBook 

	(collectionOfBooksForSale includes: aBook) 
		ifFalse: [ ^ self error: self class bookIsNotForSaleErrorDescription ].
		
	books add: aBook!

!methodRemoval: Cart #initialize stamp: 'AM 11/16/2020 21:27:49'!
initialize

	books := OrderedCollection new!
!Cart methodsFor: 'initialization' stamp: 'AM 11/16/2020 21:27:58' prior: 50868213!
initializeWithAvailableBooks: aCatalogue
	
	collectionOfBooksForSale := aCatalogue.
	books := OrderedCollection new.! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'AM 11/16/2020 21:28:10'!
Object subclass: #Cart
	instanceVariableNames: 'books catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'as yet unclassified' stamp: 'AM 11/16/2020 21:28:10' prior: 50868559!
addToCart: aBook withOcurrences: aNumberOfOccurences

	(catalogue includes: aBook) 
		ifFalse: [ ^ self error: self class bookIsNotForSaleErrorDescription ].
		
	books add: aBook withOccurrences: aNumberOfOccurences
	
	! !
!Cart methodsFor: 'as yet unclassified' stamp: 'AM 11/16/2020 21:28:10' prior: 50868660!
initializeWithAvailableBooks: aCatalogue
	
	catalogue := aCatalogue.
	books := OrderedCollection new.! !
!Cart methodsFor: 'initialization' stamp: 'AM 11/16/2020 21:28:23'!
initializeWithCatalogue: aCatalogue
	
	catalogue := aCatalogue.
	books := OrderedCollection new.! !
!Cart class methodsFor: 'as yet unclassified' stamp: 'AM 11/16/2020 21:28:23' prior: 50868189!
withAvailableBooks: aCollectionOfBooksForSale

	^self new initializeWithCatalogue: aCollectionOfBooksForSale ! !

!methodRemoval: Cart #initializeWithAvailableBooks: stamp: 'AM 11/16/2020 21:28:23'!
initializeWithAvailableBooks: aCatalogue
	
	catalogue := aCatalogue.
	books := OrderedCollection new.!
!Cart class methodsFor: 'instance creation' stamp: 'AM 11/16/2020 21:28:31' prior: 50868697!
withAvailableBooks: aCatalogue

	^self new initializeWithCatalogue: aCatalogue ! !
!Cart class methodsFor: 'instance creation' stamp: 'AM 11/16/2020 21:28:41'!
withCatalogue: aCatalogue

	^self new initializeWithCatalogue: aCatalogue ! !

!methodRemoval: Cart class #withAvailableBooks: stamp: 'AM 11/16/2020 21:28:41'!
withAvailableBooks: aCatalogue

	^self new initializeWithCatalogue: aCatalogue !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'AM 11/16/2020 21:28:46'!
ERROR!

!testRun: #CartTest #test02ABookAddedToCartIsSuccessfullyAdded stamp: 'AM 11/16/2020 21:28:46'!
ERROR!

!testRun: #CartTest #test03ManyBooksAddedOnceEachToCartAreSuccessfullyAdded stamp: 'AM 11/16/2020 21:28:46'!
ERROR!

!testRun: #CartTest #test04AddingABookThatIsNotForSaleShouldSignalError stamp: 'AM 11/16/2020 21:28:46'!
ERROR!
!CartTest methodsFor: 'as yet unclassified' stamp: 'AM 11/16/2020 21:28:58' prior: 50868344!
test01NewCartIsEmpty

	| anEmptyCart availableBooks |
	
	availableBooks := OrderedCollection new.
	
	anEmptyCart := Cart withCatalogue: availableBooks.
	
	self assert: anEmptyCart isEmpty.
	self assert: anEmptyCart listCart isEmpty.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'AM 11/16/2020 21:29:02'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'AM 11/16/2020 21:29:04' prior: 50868432!
test02ABookAddedToCartIsSuccessfullyAdded

	| aCart availableBooks |
	
	availableBooks := OrderedCollection with: 1.
	
	aCart := Cart withCatalogue: availableBooks.
	
	aCart addToCart: 1 withOcurrences: 1.
	
	self deny: aCart isEmpty.
	self assert: ( aCart listCart hasEqualElements: {1} )! !

!testRun: #CartTest #test02ABookAddedToCartIsSuccessfullyAdded stamp: 'AM 11/16/2020 21:29:05'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'AM 11/16/2020 21:29:07' prior: 50868618!
test03ManyBooksAddedOnceEachToCartAreSuccessfullyAdded

	| aCart availableBooks |
	
	availableBooks := OrderedCollection with: 1 with: 2 with: 3.
	
	aCart := Cart withCatalogue: availableBooks.
	
	aCart addToCart: 1 withOcurrences: 1. 
	aCart addToCart: 2 withOcurrences: 1.
	aCart addToCart: 3 withOcurrences: 1.
	
	self deny: aCart isEmpty.
	self assert: ( aCart listCart hasEqualElements: {1. 2. 3} )! !

!testRun: #CartTest #test03ManyBooksAddedOnceEachToCartAreSuccessfullyAdded stamp: 'AM 11/16/2020 21:29:08'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'AM 11/16/2020 21:29:10' prior: 50868543!
test04AddingABookThatIsNotForSaleShouldSignalError

	| aCart validBooks |
	
	validBooks := OrderedCollection with: 1.
	
	aCart := Cart withCatalogue: validBooks.
	
	self should: [ aCart addToCart: 2 withOcurrences: 1 ]
		raise: Error
		withMessageText: Cart bookIsNotForSaleErrorDescription.! !

!testRun: #CartTest #test04AddingABookThatIsNotForSaleShouldSignalError stamp: 'AM 11/16/2020 21:29:11'!
PASSED!